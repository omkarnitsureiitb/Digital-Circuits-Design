library ieee;
use ieee.std_logic_1164.all;

entity alu_beh is
generic(
operand_width : integer:=4);
port (
A: in std_logic_vector(operand_width-1 downto 0);
B: in std_logic_vector(operand_width-1 downto 0);
op: out std_logic_vector((operand_width*2)-1 downto 0)) ;
end alu_beh;

architecture a1 of alu_beh is

function sub(A: in std_logic_vector(operand_width-1 downto 0);
B: in std_logic_vector(operand_width-1 downto 0))
return std_logic_vector is

-- declaring and initializing variables using aggregates
variable diff : std_logic_vector(operand_width*2-1 downto 0):= (others=>'0');
variable carry : std_logic:= '1';

begin
-- Hint: Use for loop to calculate value of "diff" and "carry" variable
-- Use aggregates to assign values to multiple bits
	L1: for i in 1 to (operand_width - 1) loop
			diff(i) = B(i) xor A(i) xor carry;
			carry = ((not B) and A) or carry and (A xnor B);
		end loop L1;
	diff(0) = A(0) xor B(0);
			
return diff;
end sub;

function add(A: in std_logic_vector(operand_width-1 downto 0))
return std_logic_vector is
variable sum : std_logic_vector(operand_width*2-1 downto 0):= (others=>'0');
variable carry : std_logic:= '0';

begin

	sum(0) = A(0);
	sum(1) = A(1);
	L4: for i in 2 to 3 loop
		sum(i) = A(i) xor A(i-2) xor carry;
		carry = A(i) and A(i-2);
	end loop L4;
	
	sum(4) = carry xor A(2);
	sum(5) = A(3);
	sum(6) = '0';
	sum(7) = '0';
return sum;
end add;


function rolf(A: in std_logic_vector(operand_width-1 downto 0);
B: in std_logic_vector(operand_width-1 downto 0))
return std_logic_vector is

variable shift : std_logic_vector((operand_width*2)-1 downto 0):= (others=>'0');
variable index : integer;

begin

shift(operand_width-1 downto 0):= A;
-- Hint: use for loop to calculate value of shift variable
-- shift(____ downto _____) & shift(____ downto ______)
-- to calculate exponent, you can use double asterisk. ex: 2**i
	if B(2) = '0' and B(1) = '0' and B(0) = '0' then
		shift := ('0', '0', '0', '0', A(3), A(2), A(1), A(0));
	elsif B(2) = '0' and B(1) = '0' and B(0) = '1' then
		shift := "000" & A & "0";
	elsif B(2) = '0' and B(1) = '1' and B(0) = '0' then
		shift := "00" & A & "00";
	elsif B(2) = '0' and B(1) = '1' and B(0) = '1' then
		shift := "0" & A & "000";
	elsif B(2) = '1' and B(1) = '0' and B(0) = '0' then
		shift := A & "0000";
	elsif  B(2) = '1' and B(1) = '0' and B(0) = '1' then
		shift := (A(2), A(1), A(0),'0', '0', '0', '0', A(3));
	elsif B(2) = '1' and B(1) = '1' and B(0) = '0' then
		shift := (A(1), A(0), '0','0', '0', '0', A(3), A(2));
	else
		shift := (A(0), '0', '0','0', '0', A(3), A(2), A(1));
return shift;
end rolf;

begin
alu : process( A, B)
begin	
-- complete VHDL code for various outputs of ALU based on select lines
-- Hint: use if/else statement
--
-- sub function usage :
-- signal_name <= sub(A,B)
-- variable_name := sub(A,B)
--
-- concatenate operator usage:
-- "0000"&A
	if B(3) = '1' and A(3) = '0' then
		op <= sub(B,A);
	elsif B(3) = '0' and A(3) = '0' then
		op <= rolf(A,B);
	elsif B(3) = '1' and A(3) = '1' then
		op <= ( 7 => '0', 6 => '0', 5 => '0', 4 => '0', 3 => A(3) xor B(3), 2 => A(2) xor B(2), 1 => A(1) xor B(1), 0 => A(0) xor B(0));
	else
		op <= add(A);
end process ; --alu
end a1 ; -- a1
